{"version":3,"sources":["TimeSetPanel.js","App.js","serviceWorker.js","index.js"],"names":["TimeSetPanel","props","id","length","lableText","onClick","stateName","react_default","a","createElement","className","index_es","icon","library","add","faCaretUp","faCaretDown","faPlay","faPause","faUndoAlt","defaultSeate","breakLength","sessionLength","timerCount","timerState","timer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","ticking","countingDown","state","changeTimerState","getMinuteSecond","sec","pad","n","String","minute","Math","floor","second","handleStartStop","startTimer","clearTimer","setState","setInterval","clearInterval","handleLength","value","pervState","result","defineProperty","handleReset","stopBeepSound","playBeepSound","beep","current","play","setTimeout","pause","currentTime","React","createRef","_this$state","_this$getMinuteSecond","isRunning","console","log","src_TimeSetPanel","src","preload","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAwCeA,MAnCf,SAAsBC,GAAO,IACnBC,EAA8CD,EAA9CC,GAAIC,EAA0CF,EAA1CE,OAAQC,EAAkCH,EAAlCG,UAAWC,EAAuBJ,EAAvBI,QAASC,EAAcL,EAAdK,UACxC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAGP,GAAIA,EAAK,UAAWE,GAEvBG,EAAAC,EAAAC,cAAA,UACEP,GAAIA,EAAK,aACTG,QAAS,kBAAMA,EAAQC,GAAY,IACnCI,UAAU,oBAEVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAK,gBAGxBL,EAAAC,EAAAC,cAAA,UACEP,GAAIA,EAAK,aACTG,QAAS,kBAAMA,EAAQC,EAAW,IAClCI,UAAU,oBAEVH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAK,cAGxBL,EAAAC,EAAAC,cAAA,KAAGP,GAAIA,EAAK,UAAWQ,UAAU,eAAeP,mBCbtDU,IAAQC,IAAIC,IAAWC,IAAaC,IAAQC,IAASC,KAErD,IAAMC,EAAe,CACnBC,YAAa,EACbC,cAAe,GACfC,WAAY,KACZC,WAAY,UACZC,MAAO,MAwJMC,cApJb,SAAAA,EAAYzB,GAAO,IAAA0B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM7B,KAKRiC,QAAU,WACRP,EAAKQ,eAEyB,IAA1BR,EAAKS,MAAMb,YACbI,EAAKU,oBAVUV,EAenBW,gBAAkB,SAAAf,GAChB,IACMgB,EAAMhB,EAAa,GAGzB,SAASiB,EAAIC,GACX,OAAOA,EAAI,GAAK,IAAMA,EAAIC,OAAOD,GAEnC,MAAO,CAAEE,OAAQH,EAPLI,KAAKC,MAAMtB,EAAa,KAOTuB,OAAQN,EAAID,KAvBtBZ,EA0BnBoB,gBAAkB,WACK,OAArBpB,EAAKS,MAAMX,MAAiBE,EAAKqB,aAAerB,EAAKsB,cA3BpCtB,EA8BnBqB,WAAa,WACXrB,EAAKuB,SAAS,CAAEzB,MAAO0B,YAAYxB,EAAKO,QAAS,QA/BhCP,EAiCnBsB,WAAa,WACPtB,EAAKS,MAAMX,QACb2B,cAAczB,EAAKS,MAAMX,OACzBE,EAAKuB,SAAS,CAAEzB,MAAO,SApCRE,EAwCnB0B,aAAe,SAAC/C,EAAWgD,GACA,OAArB3B,EAAKS,MAAMX,QAEfE,EAAKuB,SAAS,SAAAK,GACZ,IAAIC,EAASD,EAAUjD,GAAagD,EAIpC,OAHIE,EAAS,EAAGA,EAAS,EAChBA,EAAS,KAAIA,EAAS,IAExB5B,OAAA6B,EAAA,EAAA7B,CAAA,GAAGtB,EAAYkD,KAGxB7B,EAAKuB,SAAS,SAAAK,GACZ,MAAO,CAAEhC,WAAsC,GAA1BgC,EAAUjC,mBApDhBK,EAwDnB+B,YAAc,WACZ/B,EAAKsB,aACLtB,EAAKuB,SAAS9B,GACdO,EAAKgC,iBA3DYhC,EA8DnBiC,cAAgB,WACdjC,EAAKkC,KAAKC,QAAQC,OAClBC,WAAWrC,EAAKgC,cAAe,MAhEdhC,EAkEnBgC,cAAgB,WACdhC,EAAKkC,KAAKC,QAAQG,QAClBtC,EAAKkC,KAAKC,QAAQI,YAAc,GApEfvC,EAuEnBQ,aAAe,WACbR,EAAKuB,SAAS,SAAAK,GACZ,MAAO,CACLhC,WAAqC,IAAzBgC,EAAUhC,WAAmBgC,EAAUhC,WAAa,EAAI,MA1EvDI,EA+EnBU,iBAAmB,WACjBV,EAAKiC,gBACLjC,EAAKuB,SAAS,SAAAK,GACZ,MAAO,CACL/B,WAAqC,YAAzB+B,EAAU/B,WAA2B,QAAU,UAC3DD,WAC2B,YAAzBgC,EAAU/B,WACoB,GAA1B+B,EAAUjC,cACc,GAAxBiC,EAAUlC,gBArFpBM,EAAKS,MAAQhB,EACbO,EAAKkC,KAAOM,IAAMC,YAHDzC,wEA4FV,IAAA0C,EAOHvC,KAAKM,MALPb,EAFK8C,EAEL9C,WACAF,EAHKgD,EAGLhD,YACAC,EAJK+C,EAIL/C,cACAE,EALK6C,EAKL7C,WACAC,EANK4C,EAML5C,MANK6C,EAQoBxC,KAAKQ,gBAAgBf,GAAxCoB,EARD2B,EAQC3B,OAAQG,EARTwB,EAQSxB,OACVyB,IAAY9C,EAElB,OADA+C,QAAQC,IAAIhD,GAEVlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACiE,EAAD,CACExE,GAAG,QACHE,UAAU,eACVD,OAAQkB,EACRhB,QAASyB,KAAKuB,aACd/C,UAAU,iBAIdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACiE,EAAD,CACExE,GAAG,UACHE,UAAU,iBACVD,OAAQmB,EACRjB,QAASyB,KAAKuB,aACd/C,UAAU,mBAIdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGP,GAAG,eAAesB,GACrBjB,EAAAC,EAAAC,cAAA,KAAGP,GAAG,aAAayC,EAAS,IAAMG,GAClCvC,EAAAC,EAAAC,cAAA,UAAQP,GAAG,aAAaG,QAASyB,KAAKiB,iBACnCwB,EACChE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAK,UAEtBL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAK,UAG1BL,EAAAC,EAAAC,cAAA,UAAQP,GAAG,QAAQG,QAASyB,KAAK4B,aAC/BnD,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAiBC,KAAK,cAGxBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAGjBH,EAAAC,EAAAC,cAAA,SAAOP,GAAG,OAAOyE,IAAI,kBAAkBC,QAAQ,OAAOC,IAAK/C,KAAK+B,eA/ItDiB,aCZEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f00ad029.chunk.js","sourcesContent":["import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport \"./TimeSetPanel.scss\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\nfunction TimeSetPanel(props) {\r\n  const { id, length, lableText, onClick, stateName } = props\r\n  return (\r\n    <div className=\"time-set-panel\">\r\n      <p id={id + \"-label\"}>{lableText}</p>\r\n\r\n      <button\r\n        id={id + \"-decrement\"}\r\n        onClick={() => onClick(stateName, -1)}\r\n        className=\"decrement-button\"\r\n      >\r\n        <FontAwesomeIcon icon=\"caret-down\" />\r\n      </button>\r\n\r\n      <button\r\n        id={id + \"-increment\"}\r\n        onClick={() => onClick(stateName, 1)}\r\n        className=\"increment-button\"\r\n      >\r\n        <FontAwesomeIcon icon=\"caret-up\" />\r\n      </button>\r\n\r\n      <p id={id + \"-length\"} className=\"time-length\">{length}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nTimeSetPanel.propTypes = {\r\n  id: PropTypes.string,\r\n  lableText: PropTypes.string,\r\n  length: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n  stateName: PropTypes.string\r\n}\r\n\r\nexport default TimeSetPanel\r\n","import React, { Component } from \"react\"\r\nimport \"./App.scss\"\r\nimport TimeSetPanel from \"./TimeSetPanel\"\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport {\r\n  faCaretUp,\r\n  faCaretDown,\r\n  faPlay,\r\n  faPause,\r\n  faUndoAlt\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nlibrary.add(faCaretUp, faCaretDown, faPlay, faPause, faUndoAlt)\r\n\r\nconst defaultSeate = {\r\n  breakLength: 5,\r\n  sessionLength: 25,\r\n  timerCount: 25 * 60 /* 1 = 1ç§’ */,\r\n  timerState: \"Session\",\r\n  timer: null\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = defaultSeate\r\n    this.beep = React.createRef()\r\n  }\r\n\r\n  ticking = () => {\r\n    this.countingDown()\r\n\r\n    if (this.state.timerCount === 0) {\r\n      this.changeTimerState()\r\n    }\r\n  }\r\n\r\n  /* 1500 => { minute: \"25\", second: \"00\"} */\r\n  getMinuteSecond = timerCount => {\r\n    const min = Math.floor(timerCount / 60)\r\n    const sec = timerCount % 60\r\n\r\n    /* 0~9 => '00'~'09' */\r\n    function pad(n) {\r\n      return n < 10 ? \"0\" + n : String(n)\r\n    }\r\n    return { minute: pad(min), second: pad(sec) }\r\n  }\r\n\r\n  handleStartStop = () => {\r\n    this.state.timer === null ? this.startTimer() : this.clearTimer()\r\n  }\r\n\r\n  startTimer = () => {\r\n    this.setState({ timer: setInterval(this.ticking, 1000) })\r\n  }\r\n  clearTimer = () => {\r\n    if (this.state.timer) {\r\n      clearInterval(this.state.timer)\r\n      this.setState({ timer: null })\r\n    }\r\n  }\r\n\r\n  handleLength = (stateName, value) => {\r\n    if (this.state.timer !== null) return\r\n\r\n    this.setState(pervState => {\r\n      let result = pervState[stateName] + value\r\n      if (result < 1) result = 1\r\n      else if (result > 60) result = 60\r\n\r\n      return { [stateName]: result }\r\n    })\r\n\r\n    this.setState(pervState => {\r\n      return { timerCount: pervState.sessionLength * 60 }\r\n    })\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.clearTimer()\r\n    this.setState(defaultSeate)\r\n    this.stopBeepSound()\r\n  }\r\n\r\n  playBeepSound = () => {\r\n    this.beep.current.play()\r\n    setTimeout(this.stopBeepSound, 3000)\r\n  }\r\n  stopBeepSound = () => {\r\n    this.beep.current.pause()\r\n    this.beep.current.currentTime = 0 /* For FCC test #Audio 3. */\r\n  }\r\n\r\n  countingDown = () => {\r\n    this.setState(pervState => {\r\n      return {\r\n        timerCount: pervState.timerCount !== 0 ? pervState.timerCount - 1 : 0\r\n      }\r\n    })\r\n  }\r\n\r\n  changeTimerState = () => {\r\n    this.playBeepSound()\r\n    this.setState(pervState => {\r\n      return {\r\n        timerState: pervState.timerState === \"Session\" ? \"Break\" : \"Session\",\r\n        timerCount:\r\n          pervState.timerState === \"Session\"\r\n            ? pervState.sessionLength * 60\r\n            : pervState.breakLength * 60\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      timerCount,\r\n      breakLength,\r\n      sessionLength,\r\n      timerState,\r\n      timer\r\n    } = this.state\r\n    const { minute, second } = this.getMinuteSecond(timerCount)\r\n    const isRunning = timer ? true : false\r\n    console.log(timer)\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"right-panel\">\r\n          <TimeSetPanel\r\n            id=\"break\"\r\n            lableText=\"Break Length\"\r\n            length={breakLength}\r\n            onClick={this.handleLength}\r\n            stateName=\"breakLength\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"left-panel\">\r\n          <TimeSetPanel\r\n            id=\"session\"\r\n            lableText=\"Session Length\"\r\n            length={sessionLength}\r\n            onClick={this.handleLength}\r\n            stateName=\"sessionLength\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"timer\">\r\n          <p id=\"timer-label\">{timerState}</p>\r\n          <p id=\"time-left\">{minute + \":\" + second}</p>\r\n          <button id=\"start_stop\" onClick={this.handleStartStop}>\r\n            {isRunning ? (\r\n              <FontAwesomeIcon icon=\"pause\" />\r\n            ) : (\r\n              <FontAwesomeIcon icon=\"play\" />\r\n            )}\r\n          </button>\r\n          <button id=\"reset\" onClick={this.handleReset}>\r\n            <FontAwesomeIcon icon=\"undo-alt\" />\r\n          </button>\r\n\r\n          <div className=\"triangle\"></div>\r\n        </div>\r\n        \r\n        <audio id=\"beep\" src=\"./BeepSound.wav\" preload=\"true\" ref={this.beep} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}